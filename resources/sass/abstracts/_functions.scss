@function rem($value_in_px, $base_font_size: 16px) {
    $raw_result: calc($value_in_px / $base_font_size);
    $rounded: round_to_decimal($raw_result);
    @return $rounded + rem;
}

@function round_to_decimal($value) {
    @return calc(ceil($value * 100) / 100);
}

@function color($category, $variant: "neutral") {
    @return map-get(map-get($colors, $category), $variant);
}


// Преобразует заданное значение в пикселях в единицы vw на основе текущей ширины экрана.
@function px-to-vw($current-screen-width, $size) {
    $result: calc($size / $current-screen-width * 100); // Вычисляем процентное соотношение размера к ширине экрана.
    $rounded: calc(ceil($result * 100) / 100); // Округляем результат до двух знаков после запятой.
    @return $rounded * 1vw; // Возвращаем итоговое значение в vw.
}

// Вычисляем значения ограничения размера элемента на основе начальной ширины экрана, начального размера элемента и целевой ширины экрана.
@function define-limits($initial-screen-width, $initial-size, $target-screen-width) {
    $result: calc($initial-size / $initial-screen-width * $target-screen-width); // Вычисляем масштабированный размер для целевой ширины экрана.
    $rounded: calc(ceil($result * 100) / 100);
     // Округляем результат до двух знаков после запятой.
    @return $rounded; // Возвращаем округленное значение.
}

// Определяет значение clamp для адаптивного размера элемента на странице.
@function vw(
    $initial-size,
    $initial-screen-width: $screen-width,
    $small-screen-size: $small-screen,
    $large-screen-size: $wrapper-width
) {
    @return clamp(
        define-limits($initial-screen-width, $initial-size, $small-screen-size), // Минимальное значение размера.
        px-to-vw($initial-screen-width, $initial-size), // Адаптивное значение размера в vw.
        define-limits($initial-screen-width, $initial-size, $large-screen-size) // Максимальное значение размера.
    );
}

@function calculate-flex($n) {
    $flex-value: 1;
    @for $i from 2 through $n {
        $flex-value: $flex-value * 0.7;
    }
    @return $flex-value;
}

// Mixin to apply the flex value based on nth-of-type
@mixin nth-flex($total) {
    @for $i from 1 through $total {
        .gens__column:nth-of-type(#{$i}) {
            flex: calculate-flex($i);
        }
    }
}
